/** 
 * @author  Artium Nihamkin, artium@nihamkin.com
 * @date    02/2019
 * @version 1.0.0
 *  
 * @brief Spline drawing and spline based animation module
 *  
 * @section LICENSE
 *
 * The MIT License (MIT)
 * Copyright © 2019 Artium Nihamkin, artium@nihamkin.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @section DESCRIPTION 
 *
 * Please refer the ash file for complete description.
 */
  
function Spline::Init()
{
  this.num_waypoints = 0; // will cause a reset of waypoint_x/y
  
  this.curr_pos = 0.0;  
  this.curr_segment = 0;  
}

/**
 * Add an element into an end of an array thus increasing it's size by 1.
 * The new array is returned by the function.
 */
int[] array_push(int a[],  int old_length,  int value)
{
  int temp[] = new int[old_length + 1];
  for(int i = 0; i < old_length; i++) {
    temp[i] = a[i];
  }
  temp[old_length] = value;
  return temp;
}

function Spline::AddWaypoint(int x,  int y)
{
  if (this.num_waypoints == 0) {
    this.waypoints_x = new int[1];
    this.waypoints_y = new int[1];  
    this.waypoints_x[0] = x;
    this.waypoints_y[0] = y;
    this.num_waypoints = 1;
  } else {
    this.waypoints_x = array_push(this.waypoints_x, this.num_waypoints, x);
    this.waypoints_y = array_push(this.waypoints_y, this.num_waypoints, y);
    
    this.num_waypoints++;
  }
}

int Spline::NumWaypoints()
{
  return this.num_waypoints;
}


function Spline::SetWaypoint(int index,  int x,  int y)
{
  if (index >= this.num_waypoints)
  {
    AbortGame("Error: cant set a non existing waypoint");
  }
  
  this.waypoints_x[index] = x;
  this.waypoints_y[index] = y;
}

 
 float CalcCatmullRom(float s, float p0,  float p1,  float p2,  float p3)
{
  return 0.5 * ( 2.0*p1 + 
                 s*(p2-p0) + 
                 s*s*(2.0*p0 - 5.0*p1 + 4.0*p2 - p3) + 
                 s*s*s*(-1.0*p0 + 3.0*p1 - 3.0*p2 + p3)
               );
}

 float CalcCatmullRomDeriviative(float s, float p0,  float p1,  float p2,  float p3)
{
  return 0.5 * ( 
                 (p2-p0) + 
                 2.0*s*(2.0*p0 - 5.0*p1 + 4.0*p2 - p3) + 
                 3.0*s*s*(-1.0*p0 + 3.0*p1 - 3.0*p2 + p3)
               );
}

function Spline::DrawWaypoints(DynamicSprite* sprite, int color,  int radius)
{
  DrawingSurface* surface = sprite.GetDrawingSurface();
  surface.DrawingColor = color;

  for(int i = 0; i < this.num_waypoints; i++) {
    surface.DrawCircle(this.waypoints_x[i], this.waypoints_y[i],  radius);
  }

  surface.Release();
}


function Spline::DrawSpline(DynamicSprite* sprite, int color,  int line_width)
{
  if(this.num_waypoints < 4) {
    AbortGame("Error: Spline requires at least 4 waypoints");
  }
    
  DrawingSurface* surface = sprite.GetDrawingSurface();
  surface.DrawingColor = color;
  
  int prevX = this.waypoints_x[1];
  int prevY = this.waypoints_y[1];
  
  for(int i=0; i < this.num_waypoints - 3; i++) { 
    for(float s = 0.0; s < 1.0001; s += 0.1)
    {
        int nextX = FloatToInt(
          CalcCatmullRom(s, 
            IntToFloat(this.waypoints_x[i]), 
            IntToFloat(this.waypoints_x[i+1]), 
            IntToFloat(this.waypoints_x[i+2]), 
            IntToFloat(this.waypoints_x[i+3])));
            
        int nextY = FloatToInt(
          CalcCatmullRom(s, 
            IntToFloat(this.waypoints_y[i]), 
            IntToFloat(this.waypoints_y[i+1]), 
            IntToFloat(this.waypoints_y[i+2]), 
            IntToFloat(this.waypoints_y[i+3])));
            
        surface.DrawLine(prevX, prevY, nextX, nextY, line_width);
        
        prevX = nextX;
        prevY = nextY;
    }
  }
  
  surface.Release();
}

SplinePositionStatus Spline::Increment(float dt,  SplineWrapParam wraparund)
{
  if (this.num_waypoints < 4) {
    AbortGame("Error: Spline requires at least 4 waypoints");
  }
 
  float dx_over_dt = CalcCatmullRomDeriviative(dt, 
            IntToFloat(this.waypoints_x[this.curr_segment]), 
            IntToFloat(this.waypoints_x[this.curr_segment+1]), 
            IntToFloat(this.waypoints_x[this.curr_segment+2]), 
            IntToFloat(this.waypoints_x[this.curr_segment+3]));
  float dy_over_dt = CalcCatmullRomDeriviative(dt, 
            IntToFloat(this.waypoints_y[this.curr_segment]), 
            IntToFloat(this.waypoints_y[this.curr_segment+1]), 
            IntToFloat(this.waypoints_y[this.curr_segment+2]), 
            IntToFloat(this.waypoints_y[this.curr_segment+3]));
  
  // float ds = dt * this.speed / Maths.Sqrt( dx_over_dt*dx_over_dt + dy_over_dt*dy_over_dt);
  //cEgo.Say(String.Format("Speed: %f, dt: %f, ds: %f",this.speed,  dt,  ds));
  
  this.curr_pos += dt;
  
  while (this.curr_pos > 1.0001) {   
  
    // Last segment without warparound, halt at the last position
    if (this.curr_segment == this.num_waypoints - 4 && wraparund != eWraparound) {
      this.curr_pos = 1.0;
      return eEnd;
    }
    
    this.curr_pos -= 1.0;
    
    if (this.curr_segment == this.num_waypoints - 4) {
      this.curr_segment = 0;
    } else {
      this.curr_segment++;
    }
  }
  
  return eNotEnd;
}

int Spline::GetCurrPosX()
{
  if (this.num_waypoints < 4) {
    AbortGame("Error: Spline requires at least 4 waypoints");
  }
  
  return FloatToInt(CalcCatmullRom(this.curr_pos, 
            IntToFloat(this.waypoints_x[this.curr_segment    ]), 
            IntToFloat(this.waypoints_x[this.curr_segment + 1]), 
            IntToFloat(this.waypoints_x[this.curr_segment + 2]), 
            IntToFloat(this.waypoints_x[this.curr_segment + 3])));
}

int Spline::GetCurrPosY()
{
  if (this.num_waypoints < 4) {
    AbortGame("Error: Spline requires at least 4 waypoints");
  }
  
  return FloatToInt(CalcCatmullRom(this.curr_pos, 
            IntToFloat(this.waypoints_y[this.curr_segment    ]), 
            IntToFloat(this.waypoints_y[this.curr_segment + 1]), 
            IntToFloat(this.waypoints_y[this.curr_segment + 2]), 
            IntToFloat(this.waypoints_y[this.curr_segment + 3])));
}

